
import choose_page;
import test_page;
import instructions;
import stimuli;
import output;
import std_sound_output_device;

Block task
{
    on_event:entry()
    {
        // if neccessary 
        // control.button_box.open();
    }

    Part blank1
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 250ms);
        }
    }

    Part part_instructions
    {
        on_event:entry()
        {
            pause_page.set_text(PART_INSTRUCTION, true);
            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }

    Part blank2
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 250ms);
        }
    }

    Part choose_part
    {
        on_event:entry()
        {
            choose_page.action(this, reference_time);
        }

        on_event:exit()
        {
            int value = choose_page.selected_list;
            // from stimuli
            int err = select_list(value);
            if (err)
                terminate "Unable to load stimuli.\r\n";
        }
    }

    Part test_instructions
    {
        on_event:entry()
        {
            pause_page.set_text(TEST_INSTRUCTION, true);
            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }

    Block testblock
    {
        TestItem item;

        on_event:entry()
        {
            num_cycles = test_items.size;
            test_page.setup(num_cycles, true);
        }

        on_event:exit()
        {
            test_output_save();
            test_page.cleanup();
        }

        Trial trial
        {

            on_event:entry()
            {
                item = test_items[testblock.cycle];
                test_page.action(this, item, reference_time, testblock.cycle);
            }

            on_event:exit()
            {
                TestOutput out;
                out.trialnum    = testblock.cycle + 1;
                out.id          = item.id;
                out.type        = item.type;
                out.fn1         = item.fn1;
                out.fn2         = item.fn2;
                out.word        = item.word;
                out.response    = test_page.resp;

                test_output_append(out);
            }
        }
    }
}

void action (Part caller)
{
    // Enter needs a caller, to signal when the task finishes.
    task.enter(caller);
}
