/******************************************************************************\
FILE:           test_page.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     Maarten Duijndam <m.j.a.duijndam@uu.nl>

DESCRIPTION:

Provides a page object to show to the participant during test trials.
It handles presenting the stimulus and recording the participant's response.


HISTORY:
2011-10-25 TV   Created.
2017-01-05 MD   Adapted from a lexical decision task to a
                test page for word judgment.
                Now the participant hears two utterances of the same word.
                Optionally based on the settings in defs.zm it is possible
                to replay both utterances or one separately.

\******************************************************************************/

import stimuli;
import std_sound_output_device;

Page test_page
{
    TestItem    item;           // trial control parameters

    init()
    {
        fill_pattern_color = TEST_PAGE_COLOR;
    }


    on_event:key_press()
    {
        // Handle left-shift (no) and right-shift (yes).
        if (input_key == KEY_Shift_L)
            response.process_hit(0, event_time);
        else if (input_key == KEY_Shift_R)
            response.process_hit(1, event_time);
        else
            handle_special_key(this, input_key, input_modifiers);
    }

    on_event:message()
    {
        // Process button-box message. See setup() below.
        response.process_hit(message_arg, event_time);
    }

    // Two word sound chain
    SoundChain soundchain
    {
        SoundSequence
        {
            SoundFile word1
            {
            }

            SoundFile word2
            {
            }
        }

        SoundPlayback playback
        {
        }

        on_event:finish()
        {
            page.layout.show_response_buttons();
        }
    }

    // Sound chain to repeat first word.
    SoundChain soundchain_first
    {
        SoundFile word1
        {
        }

        SoundPlayback playback
        {
        }
    }

    // Sound chain to repeat first word.
    SoundChain soundchain_second
    {
        SoundFile word2
        {
        }

        SoundPlayback playback
        {
        }
    }

    VerticalLayout layout
    {
        init()
        {
            spacing = 50;
            height = 0;     // 0 means as large as possible
        }


        LabelGadget word 
        {
            init()
            {
                fill_pattern_color = TEST_PAGE_STIMULUS_COLOR;
                size = 450, 100;
                
                font_family = TEST_PAGE_STIMULUS_FONT_FAMILY;
                font_size = TEST_PAGE_STIMULUS_FONT_SIZE;
                line_pattern_color = TEST_PAGE_STIMULUS_TEXT_COLOR;
                hor_alignment = ALIGN_CENTER;
                ver_alignment = ALIGN_CENTER;
            }
        }

        HorizontalLayout repeat_buttons
        {
            init()
            {
                spacing = 50;
                options = LAYOUT_EQUAL_WIDTH;
            }


            ButtonGadget button_repfirst
            {
                init()
                {
                    text = BUTTON_REPEAT_FIRST_TEXT;
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 150, 75;
                }


                on_event:activate()
                {
                    //response.process_hit(0, event_time);
                }
            }


            ButtonGadget button_repsecond
            {
                init()
                {
                    text = BUTTON_REPEAT_SECOND_TEXT;
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 150, 75;
                }


                on_event:activate()
                {
                    //response.process_hit(1, event_time);
                }
            }
        }


        time start_stimulus(time t)
        {
            // Prepare stimulus presentation object.
            canvas.stimulus.text = item.word;

            // Start fixation cross.
            canvas.fixation.start(t, FIXATION_DURATION);
            time fixoffset = canvas.fixation.expected_finish_time;

            // Start stimulus at fixation offset.
            canvas.stimulus.start(fixoffset, STIMULUS_DURATION);

            // Return stimulus onset time.
            return canvas.stimulus.expected_start_time;
        }


        void reset()
        {
            full_abort();

            canvas.stimulus.is_visible = false;
        }
    }


    Response response
    {
        // Response data.
        int     value;          // response value: 0=no, 1=yes, -1=timeout
        int     rt;             // response time [ms]
        int     correct;        // correct response: 0=no, 1=yes, -1=n.a.


        void clear()
        {
            value = -1;
            rt = -9999;
            correct = -1;
        }


        void process_hit(int val, time t)
        {
            HitType validity = hit(t);

            // Accept the first hit in the response interval and end the 
            // response interval.
            if (validity == HIT_VALID)
            {
                value = val;
                rt = int(reaction_time(0));
                correct = 
                    (item.type != NON_WORD && val == 1) ||
                    (item.type == NON_WORD && val == 0);

                ignore_remaining_hits();

                stop();
            }
            else if (validity == HIT_TOO_EARLY || validity == HIT_TOO_LATE)
            {
                // False alarm. Deal with this if desired.
            }
        }


        on_event:finish()
        {
            real correctness = 0;
            if (num_valid_hits > 0) correctness = correct ? 1 : -1;

            if (!test_page_overlay.start_feedback(this, correctness, 
                    FEEDBACK_DURATION)) 
                done(CONTINUE);
        }


        on_event:message()
        {
            done(CONTINUE);
        }
    }


    // Aborts any ongoing activity on this page and signals the initiator
    // of the trial that we're done.
    void done(int msgid)
    {
        // Just in case; abort presentation if still active.
        layout.reset();

        signal_target(msgid);   // tell caller we're done
        target = null;

        control.clear_status();
    }


    //==========================================================================


    // Performs preparatory work required before using this page.
    void setup(int ntrials=-1, bool fb=false, bool pr=false)
    {
        test_page_overlay.setup(this);

        // Show or hide prompt.
        test_page_overlay.show_prompt(pr ? 
            "is it a real word?" : "");

        // Enable or disable the progress bar.
        test_page_overlay.show_progress_bar(ntrials);   // disabled if < 0

        // Enable or disable feedback.
        test_page_overlay.enable_feedback(fb);          // disabled if false


        // Enable button-box buttons 0 and 1 for resp. no(0) and yes(1).
        control.target = this;
        control.button_box.disable_buttons();
        control.button_box.enable_button(0, 0); // button 0 means no(0)
        control.button_box.enable_button(1, 1); // button 1 means yes(1)
    }


    // Performs cleaning up if necessary.
    void cleanup()
    {
        test_page_overlay.cleanup();

        control.button_box.disable_buttons();
        control.target = null;
    }


    // Starts a trial.
    void action(Object caller, TestItem it, time tref, int count=-1)
    {
        // Save the passed trial control parameters.
        item = it;


        // Show this page (if not yet done) and make tref the trial start time.
        tref = test_window1.show_test_page(this, tref + INTERTRIAL_INTERVAL);


        // Reset response data.
        response.clear();


        // Start fixation symbol and stimulus.
        time stimonset = layout.start_stimulus(tref);


        // Response interval starts at stimulus onset. Timeout after 
        // RESPONSE_DURATION unless this duration is 0s or less.
        response.start(stimonset, RESPONSE_DURATION);


        // Update progress counter (if enabled).
        test_page_overlay.update_progress_bar(count);


        // Update status line on control window. Cleared in done() above.
        control.set_status(
            string(item.id) + "  " + 
            string(item.type) + "  " + 
            string(item.word));


        // Remember who to signal when the trial is over.
        target = caller;
    }
}
