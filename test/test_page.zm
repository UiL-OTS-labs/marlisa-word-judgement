/******************************************************************************\
FILE:           test_page.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     Maarten Duijndam <m.j.a.duijndam@uu.nl>

DESCRIPTION:

Provides a page object to show to the participant during test trials.
It handles presenting the stimulus and recording the participant's response.


HISTORY:
2011-10-25 TV   Created.
2017-01-05 MD   Adapted from a lexical decision task to a
                test page for word judgment.
                Now the participant hears two utterances of the same word.
                Optionally based on the settings in defs.zm it is possible
                to replay both utterances or one separately.

\******************************************************************************/

import stimuli;
import std_sound_output_device;
import defs;

Page test_page
{
    TestItem    item;           // trial control parameters
    RespId      resp;

    init()
    {
        fill_pattern_color = TEST_PAGE_COLOR;
    }


    on_event:key_press()
    {
        // Handle left-shift (no) and right-shift (yes).
        handle_special_key(this, input_key, input_modifiers);
    }

    on_event:message()
    {
        // Process button-box message. See setup() below.
        // response.process_hit(message_arg, event_time);
    }

    // Two word sound chain
    SoundChain soundchain
    {
        SoundSequence sequence
        {
            SoundFile word1
            {
            }

            SoundFile word2
            {
            }
        }

        SoundPlayback playback
        {
        }

        on_event:finish()
        {
            test_page.layout.show_response_buttons();
        }

        time play(time t)
        {
            // abort all sound chains
            abort();
            soundchain_first.abort();
            soundchain_second.abort();

            // make sure a sound_output_device is selected.
            playback.device = sound_output_device;
            sequence.word1.file = stimuli_dir() + "audio/" + item.fn1;
            sequence.word1.trailer_duration = ISI;
            sequence.word2.file = stimuli_dir() + "audio/" + item.fn2;

            start(t);
            return expected_start_time;
        }
    }

    // Sound chain to repeat first word.
    SoundChain soundchain_first
    {
        SoundFile word1
        {
        }

        SoundPlayback playback
        {
        }

        time play(time t)
        {
            // make sure a sound_output_device is selected.
            playback.device = sound_output_device;
            word1.file = stimuli_dir() + "audio/" + item.fn1;
            start(t);
            return expected_start_time;
        }
    }

    // Sound chain to repeat first word.
    SoundChain soundchain_second
    {
        SoundFile word2
        {
        }

        SoundPlayback playback
        {
        }
        
        time play(time t)
        {
            // make sure a sound_output_device is selected.
            playback.device = sound_output_device;
            word2.file = stimuli_dir() + "audio/" + item.fn2;
            start(t);
            return expected_start_time;
        }
    }

    bool sound_busy()
    {
        return  soundchain.is_busy         ||
                soundchain_first.is_busy   ||
                soundchain_second.is_busy;
    }

    VerticalLayout layout
    {
        init()
        {
            spacing = 25;
            height = 0;     // 0 means as large as possible
            is_visible = true;
        }


        LabelGadget word 
        {
            init()
            {
                fill_pattern_color = TEST_PAGE_LABEL_COLOR;
                size = 450, 100;
                
                font_family = TEST_PAGE_STIMULUS_FONT_FAMILY;
                font_size = TEST_PAGE_STIMULUS_FONT_SIZE;
                text_color = TEST_PAGE_LABEL_TEXT_COLOR;
                hor_alignment = ALIGN_CENTER;
                ver_alignment = ALIGN_CENTER;
            }
        }

        LabelGadget sentence
        {
            init()
            {
                fill_pattern_color = TEST_PAGE_LABEL_COLOR;
                height  = 100;
                width   = 0;
                
                font_family = TEST_PAGE_STIMULUS_FONT_FAMILY;
                font_size = TEST_PAGE_STIMULUS_FONT_SIZE;
                text_color = TEST_PAGE_LABEL_TEXT_COLOR;
                hor_alignment = ALIGN_CENTER;
                ver_alignment = ALIGN_CENTER;
            }
        }

        // button to repeat both stimuli.
        ButtonGadget button_repall
        {
            init()
            {
                is_visible         = false;
                text               = BUTTON_REPEAT_BOTH_TEXT;
                fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                text_color         = TEST_PAGE_BUTTON_TEXT_COLOR;
                font_size          = TEST_PAGE_BUTTON_FONT_SIZE;
                font_family        = TEST_PAGE_BUTTON_FONT_FAMILY;
            }

            on_event:activate()
            {
                if(!sound_busy())
                    soundchain.play(event_time + 50ms);
            }
        }

        // buttons to repeat either the first or the second stimulus.
        HorizontalLayout layout_repbutton
        {
            init()
            {
                spacing = 50;
                options = LAYOUT_EQUAL_WIDTH;
                is_visible = true;
            }

            // button to repeat the first
            ButtonGadget button_repfirst
            {
                init()
                {
                    is_visible = false;
                    text = BUTTON_REPEAT_FIRST_TEXT;
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 300, 75;
                }


                on_event:activate()
                {
                    if (!sound_busy())
                        soundchain_first.play(event_time + 50ms);
                }
            }

            // button to repeat the second
            ButtonGadget button_repsecond
            {
                init()
                {
                    is_visible = false;
                    text = BUTTON_REPEAT_SECOND_TEXT;
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 300, 75;
                }


                on_event:activate()
                {
                    if (!sound_busy())
                        soundchain_second.play(event_time + 50ms);
                }
            }
        }

        // Buttons to respond
        HorizontalLayout layout_resp
        {
            on_event:init ()
            {
                spacing = 50;
                options = LAYOUT_EQUAL_WIDTH;
                is_visible = true;
            }

            ButtonGadget button_respfirst
            {
                init()
                {
                    is_visible = false;
                    text = BUTTON_FIRST_CORRECT_TEXT;
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 300, 75;
                }

                on_event:activate()
                {
                    show_continue_button();
                    button_respsecond.fill_pattern_color =
                            TEST_PAGE_BUTTON_COLOR;
                    fill_pattern_color = CHOSEN_BUTTON_COLOR;
                    resp = FIRST;
                }
            }
            
            ButtonGadget button_respsecond
            {
                init()
                {
                    is_visible = false;
                    text = BUTTON_SECOND_CORRECT_TEXT;
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 300, 75;

                }


                on_event:activate()
                {
                    show_continue_button();
                    button_respfirst.fill_pattern_color =
                            TEST_PAGE_BUTTON_COLOR;
                    fill_pattern_color = CHOSEN_BUTTON_COLOR;
                    resp = SECOND;
                }
            }
        }

        ButtonGadget continue_button
        {
            init()
            {
                is_visible = false;
                text = CONTINUE_BUTTON_TEXT;
                font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                size = 150, 75;
            }

            on_event:activate()
            {
                done(CONTINUE);
            }
        }

        void show_response_buttons()
        {
            if (SHOW_REPEAT_FIRST_BUTTON)
                layout_repbutton.button_repfirst.is_visible = true;
            if (SHOW_REPEAT_SECOND_BUTTON)
                layout_repbutton.button_repsecond.is_visible= true;
            if (SHOW_REPEAT_BOTH_BUTTON)
                button_repall.is_visible                    = true;

            layout_resp.button_respfirst.is_visible         = true;
            layout_resp.button_respsecond.is_visible        = true;
        }

        void show_continue_button()
        {
            continue_button.is_visible = true;
        }

        time start_stimulus(time t)
        {
            // Prepare stimulus presentation object.
            layout.word.text = item.word, true;
            layout.sentence.text = item.sentence, true;
            
            soundchain.play(t);

            // Return stimulus onset time.
            return soundchain.expected_start_time;
        }


        void reset()
        {
            full_abort();

            layout.button_repall.is_visible = false;
            layout.layout_repbutton.button_repfirst.is_visible = false;
            layout.layout_repbutton.button_repsecond.is_visible = false;
            layout.layout_resp.button_respfirst.is_visible = false;
            layout.layout_resp.button_respsecond.is_visible = false;
            layout.continue_button.is_visible = false;
            
            layout.layout_resp.button_respfirst.fill_pattern_color =
                    TEST_PAGE_BUTTON_COLOR;
            layout.layout_resp.button_respsecond.fill_pattern_color =
                    TEST_PAGE_BUTTON_COLOR;
        }
    }

    // Aborts any ongoing activity on this page and signals the initiator
    // of the trial that we're done.
    void done(int msgid)
    {
        // Just in case; abort presentation if still active.
        layout.reset();

        signal_target(msgid);   // tell caller we're done
        target = null;

        control.clear_status();
    }


    //==========================================================================


    // Performs preparatory work required before using this page.
    void setup(int ntrials=-1, bool fb=false)
    {
        test_page_overlay.setup(this);

        // Enable or disable the progress bar.
        test_page_overlay.show_progress_bar(ntrials);   // disabled if < 0

        // Enable or disable feedback.
        test_page_overlay.enable_feedback(fb);          // disabled if false


        // Enable button-box buttons 0 and 1 for resp. no(0) and yes(1).
        control.target = this;
        control.button_box.disable_buttons();
    }


    // Performs cleaning up if necessary.
    void cleanup()
    {
        test_page_overlay.cleanup();

        control.button_box.disable_buttons();
        control.target = null;
    }


    // Starts a trial.
    void action(Object caller, TestItem it, time tref, int count=-1)
    {
        // Save the passed trial control parameters.
        item = it;
        
        // set the chosen button to false;
        resp = NO_RESP;

        // Show this page (if not yet done) and make tref the trial start time.
        tref = test_window1.show_test_page(this, tref + INTERTRIAL_INTERVAL);


        // Start fixation symbol and stimulus.
        time stimonset = layout.start_stimulus(tref);

        // Update progress counter (if enabled).
        test_page_overlay.update_progress_bar(count);

        // Update status line on control window. Cleared in done() above.
        control.set_status(
            string(item.id) + "  " + 
            string(item.type) + "  " + 
            string(item.word)
            );


        // Remember who to signal when the trial is over.
        target = caller;
    }
}
